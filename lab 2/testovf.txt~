-o2
 .file   "testovf.c”
        .text
        .p2align 4,,15
        .globl  testovf
        .type   testovf, @function
testovf:
        xorl    %eax, %eax
	ret
	.size   testovf, .-testovf
	.ident  "GCC: (GNU) 6.3.0"
        .section        .note.GNU-stack,"",@progbits

Gcc flag -o2 is the level of optimization code 2, it is the high of optimization. The compiler will ignore
the overflow because it assumes that the sum of those 2 numbers is always greater than either of the numbers.
n + 9223372036854775807 < n is always false. It will just return 0 with XORing itself. 

-O2 -fwrapv,

      .file   "testovf.c"
        .text
        .p2align 4,,15
        .globl  testovf
        .type   testovf, @function
testovf:
        movabsq $9223372036854775807, %rax
	addq    %rdi, %rax
	cmpq    %rax, %rdi
	setg    %al
        ret
        .size   testovf, .-testovf
        .ident  "GCC: (GNU) 6.3.0"
	.section        .note.GNU-stack,"",@progbits

Gcc flag -o2 -fwrapv is always wrap even the overflow is occured. 

In this flag, though overflow occurs, compiler doesn’t care and it always wrap sign arithmetics.
By looking at the code above, it can be seen that, really long value is stored in %rax and then 
added with the value %rdi, which will be overflow, but compiler wrap and give us small value 
that are store back in %rax. %rax then compared with %rdi, and then evaluates. The evaluation is 
true as Over Flow(OF) flag put in %rax and then function returns


-o2 -fsanitize=undefined

        .text
        .p2align 4,,15
        .globl  testovf
        .type   testovf, @function
testovf:
        pushq   %rbp
        pushq   %rbx
        movabsq $9223372036854775807, %rdx
        movq    %rdi, %rbp
        movq    %rdi, %rbx
        subq    $8, %rsp
        addq    %rdx, %rbp
        jo      .L6
.L2:
        cmpq    %rbp, %rbx
        setg    %al
        addq    $8, %rsp
        popq    %rbx
        popq    %rbp
        ret
.L6:
        movq    %rdi, %rsi
        movl    $.Lubsan_data0, %edi
        call    __ubsan_handle_add_overflow
        jmp     .L2
        .size   testovf, .-testovf
        .section        .rodata.str1.1,"aMS",@progbits,1
.LC0:
        .string “testovf.c”
        .data
        .align 16
        .type   .Lubsan_data0, @object
        .size   .Lubsan_data0, 24
.Lubsan_data0:
        .quad   .LC0
        .long   4
        .long   14
        .quad   .Lubsan_type0
        .align 2
        .type   .Lubsan_type0, @object
        .size   .Lubsan_type0, 15
.Lubsan_type0:
        .value  0
        .value  13
        .string "'long int'"
        .ident  "GCC: (GNU) 6.3.0"
        .section        .note.GNU-stack,"",@progbits

At the very first, it can be seen that machine instruction pushes some stack frame.
We have jumm from .L2 to .L6 if overflow occur. addq %rdx and %rbp adding large number
and is thus overflow, that set OF flag to 1, which is true in this case. .L6 call   
 “__ubsan_handle_add_overflow” to handle the overflow. If overflow occur this function 
print out error message on the screen during the runtime and continue to .L2. Here .L2 handles the
computation as to based on if it is set to be default in the compiler that can be trap or wrap. In .L2
the summation result compared and setting lower 8 bit of the result to the boolean expression.  
